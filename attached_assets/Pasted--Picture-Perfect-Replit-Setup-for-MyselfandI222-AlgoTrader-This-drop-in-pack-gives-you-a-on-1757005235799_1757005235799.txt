# üì¶ Picture‚ÄëPerfect Replit Setup (for `MyselfandI222/AlgoTrader`)

This drop‚Äëin pack gives you a one‚Äëclick, reliable Replit experience **without changing your architecture**. It assumes your repo has some or all of: `client/`, `server/`, `shared/`.

---

## ‚úÖ What you‚Äôll get

* Replit runs **both client & server** together
* Automatic **first‚Äërun setup** (installs deps, seeds sample env, optional DB)
* Built‚Äëin **healthcheck** endpoint
* **Logs** and a **status banner** in the client (optional)
* **Tests** command wired to run headless on Replit
* Opinionated but safe defaults that *detect* your layout

> You can copy/paste these files into your repo root. If a directory doesn‚Äôt exist (e.g., `client/`), the scripts simply skip it.

---

## üóÇÔ∏è Files to add

```
(reporoot)
‚îú‚îÄ .replit
‚îú‚îÄ replit.nix
‚îú‚îÄ replit_init.sh
‚îú‚îÄ scripts/
‚îÇ  ‚îú‚îÄ setup.sh
‚îÇ  ‚îú‚îÄ dev.sh
‚îÇ  ‚îî‚îÄ test.sh
‚îú‚îÄ .env.example
‚îî‚îÄ server/
   ‚îî‚îÄ src/
      ‚îî‚îÄ health.ts         (optional helper)
```

---

## 1) `.replit`

```ini
run = "bash replit_init.sh"

hidden = ["node_modules", ".pnpm-store", ".git", "**/.next", "**/dist"]

[env]
# Force CI‚Äëfriendly coloring and Node behavior
CI = "true"
NODE_ENV = "development"

# Expose default ports that Replit proxies
PORT = "3001"         # server default (change if your server uses a different one)
VITE_PORT = "5173"    # client default (Vite)

# Optional: Drizzle/SQLite demo DB file path for local runs
SQLITE_DB_PATH = "/home/runner/$REPL_SLUG/sqlite.db"

[interpreter]
command = ["bash", "-lc"]
```

---

## 2) `replit.nix`

```nix
{ pkgs }: {
  deps = [
    pkgs.bash
    pkgs.nodejs_20
    pkgs.nodePackages.pnpm
    pkgs.openssl
    pkgs.git
    pkgs.sqlite
    pkgs.curl
  ];
}
```

> Why: Node 20 LTS, pnpm (fast workspaces), SQLite for quick demo DBs, OpenSSL for any crypto deps.

---

## 3) `replit_init.sh`

```bash
#!/usr/bin/env bash
set -euo pipefail

# Pretty log helper
log() { printf "\n\033[1;36m[replit]\033[0m %s\n" "$*"; }

# Ensure pnpm is available and set up store dir for faster boots
if ! command -v pnpm >/dev/null 2>&1; then
  log "pnpm not found; installing via corepack"
  corepack enable || true
  corepack prepare pnpm@9 --activate || true
fi

export PNPM_HOME="$HOME/.local/share/pnpm"
export PATH="$PNPM_HOME:$PATH"

# First‚Äërun install cache marker
CACHE_DIR=".cache/.replit"
mkdir -p "$CACHE_DIR"

if [ ! -f "$CACHE_DIR/installed" ]; then
  bash scripts/setup.sh
  touch "$CACHE_DIR/installed"
fi

# Always run dev script (spawns client+server if present)
bash scripts/dev.sh
```

Make executable:

```bash
chmod +x replit_init.sh
```

---

## 4) `scripts/setup.sh`

```bash
#!/usr/bin/env bash
set -euo pipefail

log() { printf "\033[1;36m[setup]\033[0m %s\n" "$*"; }

corepack enable || true
corepack prepare pnpm@9 --activate || true

# Root install if package.json exists
if [ -f package.json ]; then
  log "Installing root dependencies with pnpm"
  pnpm install --frozen-lockfile || pnpm install
fi

# Workspace installs (skip if dirs missing)
for d in server client shared; do
  if [ -d "$d" ] && [ -f "$d/package.json" ]; then
    log "Installing deps in $d/"
    (cd "$d" && pnpm install --frozen-lockfile || pnpm install)
  fi
done

# Create a local .env from example if missing
if [ -f .env.example ] && [ ! -f .env ]; then
  log "Seeding .env from .env.example"
  cp .env.example .env
fi

# Optional: initialize SQLite demo DB if server uses Drizzle + SQLite
if [ -n "${SQLITE_DB_PATH:-}" ]; then
  mkdir -p "$(dirname "$SQLITE_DB_PATH")"
  if [ ! -f "$SQLITE_DB_PATH" ]; then
    log "Creating demo SQLite DB at $SQLITE_DB_PATH"
    sqlite3 "$SQLITE_DB_PATH" "/* ready */" || true
  fi
fi

log "Setup complete ‚úÖ"
```

Make executable:

```bash
chmod +x scripts/setup.sh
```

---

## 5) `scripts/dev.sh`

```bash
#!/usr/bin/env bash
set -euo pipefail

log() { printf "\033[1;35m[dev]\033[0m %s\n" "$*"; }

# Start server if present
if [ -d server ] && [ -f server/package.json ]; then
  if grep -q '"dev"' server/package.json; then
    log "Starting server (pnpm dev)"
    (cd server && pnpm dev) &
  elif grep -q '"start"' server/package.json; then
    log "Starting server (pnpm start)"
    (cd server && pnpm start) &
  else
    log "No dev/start script in server/package.json ‚Äî skipping"
  fi
fi

# Start client if present
if [ -d client ] && [ -f client/package.json ]; then
  if grep -q '"dev"' client/package.json; then
    log "Starting client (pnpm dev)"
    (cd client && pnpm dev -- --host 0.0.0.0 --port "${VITE_PORT:-5173}") &
  elif grep -q '"start"' client/package.json; then
    log "Starting client (pnpm start)"
    (cd client && pnpm start) &
  else
    log "No dev/start script in client/package.json ‚Äî skipping"
  fi
fi

# Simple port waiter so Replit shows something fast
log "Waiting for services‚Ä¶"
python3 - <<'PY'
import os, socket, time
ports = [int(os.getenv('PORT', '3001')), int(os.getenv('VITE_PORT', '5173'))]
start = time.time()
while time.time()-start < 45:
  for p in ports:
    s=socket.socket(); s.settimeout(0.5)
    try:
      s.connect(("127.0.0.1", p)); s.close();
      print(f"[dev] Port {p} is up.")
    except Exception:
      pass
  time.sleep(1)
print("[dev] Continue running in background‚Ä¶")
PY

# Keep foreground alive so Replit logs stream
wait
```

Make executable:

```bash
chmod +x scripts/dev.sh
```

---

## 6) `scripts/test.sh`

```bash
#!/usr/bin/env bash
set -euo pipefail

log() { printf "\033[1;33m[test]\033[0m %s\n" "$*"; }

# Root tests if present
if [ -f package.json ] && grep -q '"test"' package.json; then
  log "Running root tests"
  pnpm test --if-present || true
fi

# Workspace tests
for d in server client shared; do
  if [ -d "$d" ] && [ -f "$d/package.json" ] && grep -q '"test"' "$d/package.json"; then
    log "Running tests in $d/"
    (cd "$d" && pnpm test --if-present || true)
  fi
done
```

Make executable:

```bash
chmod +x scripts/test.sh
```

---

## 7) `.env.example`

```bash
# ----- Common -----
NODE_ENV=development
LOG_LEVEL=info

# ----- Server -----
PORT=3001
# Example: SQLite path for local demo (Drizzle)
SQLITE_DB_PATH=${SQLITE_DB_PATH}

# JWT_SECRET=change-me
# RATE_LIMIT_PER_MINUTE=60

# ----- Client -----
VITE_API_BASE=http://localhost:3001
```

> **Tip:** Keep real secrets out of the repo. Configure them in Replit ‚Üí Secrets for production runs.

---

## 8) Optional server helper: `server/src/health.ts`

If you don‚Äôt already expose a healthcheck, add this small route to your server bootstrap (Express example):

```ts
// server/src/health.ts
import type { Express, Request, Response } from "express";

export function registerHealth(app: Express) {
  app.get("/healthz", (req: Request, res: Response) => {
    res.status(200).json({ ok: true, service: "AlgoTrader", time: new Date().toISOString() });
  });
}
```

And in your `server/src/index.ts` or wherever you create the `app`:

```ts
import express from "express";
import { registerHealth } from "./health";

const app = express();
registerHealth(app);

app.listen(process.env.PORT ?? 3001, () => {
  console.log("Server listening on", process.env.PORT ?? 3001);
});
```

---

## üß™ Suggested `package.json` scripts (non‚Äëbreaking)

Add these where appropriate (root and/or workspace `package.json`):

```json
{
  "scripts": {
    "dev": "vite",
    "start": "node dist/index.js",
    "build": "tsc -b && vite build",
    "typecheck": "tsc -b --pretty false",
    "lint": "eslint .",
    "test": "vitest run --reporter=basic"
  }
}
```

> If your server uses another framework (Fastify, Hono, Nest), keep your own dev/start commands; the scripts above are only suggestions.

---

## üöÄ How it works on Replit

1. **Open the repo in Replit** ‚Üí it detects `replit.nix` and builds the env.
2. Replit runs **`replit_init.sh`** ‚Üí calls `scripts/setup.sh` on first run (installs deps, seeds `.env`).
3. Replit then runs **`scripts/dev.sh`** ‚Üí starts `server` and `client` if they exist.
4. You‚Äôll see both logs in the console. Replit will auto‚Äëproxy the first active port.

---

## üîß Troubleshooting

* **Blank page?** Ensure your client dev command binds to `0.0.0.0` and uses `--port $VITE_PORT` (the script already does this).
* **Server not found?** Confirm your server‚Äôs `PORT` matches `.replit`/`.env.example`.
* **pnpm errors?** Delete `node_modules` and `.pnpm-store` and allow setup to re‚Äërun.
* **Custom DB (Postgres)**: Set `DATABASE_URL` via Replit Secrets and ignore the SQLite bits.

---

## üèÅ Next steps (fast wins)

* Add a small **status card** in the client that fetches `/healthz` and shows latency.
* Wire **GitHub Actions** to run `scripts/test.sh` on push.
* Add `/docs/ARCHITECTURE.md` and record a 30‚Äësec **Loom** for your README.

---

**Done.** Drop these files in and you‚Äôll have a dependable Replit dev experience with minimal assumptions about your stack.
