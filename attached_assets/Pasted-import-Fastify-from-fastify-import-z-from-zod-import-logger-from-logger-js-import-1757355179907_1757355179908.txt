import Fastify from "fastify";
import { z } from "zod";
import { logger } from "./logger.js";
import { loadUniverse } from "./data.js";
import { scanSymbols, defaultParams } from "./scanner.js";

const app = Fastify({ logger });

app.get("/healthz", async () => ({ ok: true, service: "minervini-sepa" }));

const querySchema = z.object({
  tickers: z.string().optional(),
  baseWindow: z.coerce.number().min(20).max(70).optional(),
  breakoutBufferPct: z.coerce.number().min(0).max(3).optional(),
  volumeSurgeMin: z.coerce.number().min(0.5).max(5).optional(),
  proximityToHighPct: z.coerce.number().min(5).max(35).optional(),
  aboveLowPct: z.coerce.number().min(10).max(80).optional()
});

app.get("/scan", async (req, reply) => {
  const parsed = querySchema.safeParse((req.query ?? {}));
  if (!parsed.success) return reply.code(400).send(parsed.error);

  const q = parsed.data;
  const universe = q.tickers ? q.tickers.split(",").map(s => s.trim().toUpperCase()) : loadUniverse();

  const params = {
    ...defaultParams,
    ...(q.baseWindow ? { baseWindow: q.baseWindow } : {}),
    ...(q.breakoutBufferPct ? { breakoutBufferPct: q.breakoutBufferPct } : {}),
    ...(q.volumeSurgeMin ? { volumeSurgeMin: q.volumeSurgeMin } : {}),
    ...(q.proximityToHighPct ? { proximityToHighPct: q.proximityToHighPct } : {}),
    ...(q.aboveLowPct ? { aboveLowPct: q.aboveLowPct } : {}),
  };

  const results = await scanSymbols(universe, params);
  return { count: results.length, results, params };
});

// CLI mode for Replit shell or npm run scan
if (process.argv.includes("--scan")) {
  (async () => {
    const universe = loadUniverse();
    const results = await scanSymbols(universe);
    console.table(results.slice(0, 20).map(r => ({
      symbol: r.symbol,
      price: r.price.toFixed(2),
      breakout: r.breakout ? "YES" : "no",
      rsRank: r.rsRankPct ?? 0,
      dist52wHighPct: r.distanceFrom52WHigh.toFixed(1),
      volSurge: r.volume.surge?.toFixed(2) ?? "-"
    })));
    process.exit(0);
  })();
} else {
  const PORT = Number(process.env.PORT ?? 8000);
  app.listen({ port: PORT, host: "0.0.0.0" })
     .then(() => logger.info(`HTTP server on :${PORT}`))
     .catch(err => { logger.error(err); process.exit(1); });
}
