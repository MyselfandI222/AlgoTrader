import os, math, time, json, argparse, datetime as dt
import numpy as np
import pandas as pd
import yfinance as yf

# ---------------------------
# Helpers
# ---------------------------
def drawdown(equity):
    peak = equity.cummax()
    dd = (equity - peak) / peak
    return dd

def metrics_from_equity(equity, ret_series, rf=0.0):
    # equity indexed by date, daily freq
    total_return = equity.iloc[-1] / equity.iloc[0] - 1
    days = (equity.index[-1] - equity.index[0]).days
    years = max(days / 365.25, 1e-9)
    cagr = (equity.iloc[-1] / equity.iloc[0]) ** (1/years) - 1

    # Sharpe (daily to annualized)
    if len(ret_series) > 1:
        ann_vol = ret_series.std(ddof=1) * math.sqrt(252)
        ann_ret = ret_series.mean() * 252
        sharpe = (ann_ret - rf) / (ann_vol + 1e-12)
    else:
        sharpe = np.nan

    mdd = drawdown(equity).min()
    return {"CAGR": cagr, "TotalReturn": total_return, "Sharpe": sharpe, "MaxDD": mdd}

def pretty_pct(x):
    return f"{x*100:.2f}%"

# ---------------------------
# Indicators
# ---------------------------
def sma(series, n):
    return series.rolling(n).mean()

def rsi(series, n=14):
    delta = series.diff()
    up = delta.clip(lower=0)
    down = -delta.clip(upper=0)
    roll_up = up.ewm(alpha=1/n, adjust=False).mean()
    roll_down = down.ewm(alpha=1/n, adjust=False).mean()
    rs = roll_up / (roll_down + 1e-12)
    return 100 - (100 / (1 + rs))

# ---------------------------
# Data
# ---------------------------
def get_prices(ticker, start, end):
    df = yf.download(ticker, start=start, end=end, auto_adjust=True, progress=False)
    if df.empty:
        raise ValueError(f"No data for {ticker}.")
    df = df[['Close']]
    df.columns = ['close']
    return df

# ---------------------------
# Strategy
# ---------------------------
def signals_sma_rsi(df, fast=10, slow=30, use_rsi=False, rsi_len=14, rsi_buy=55, rsi_sell=45):
    df = df.copy()
    df['sma_fast'] = sma(df['close'], fast)
    df['sma_slow'] = sma(df['close'], slow)
    df['rsi'] = rsi(df['close'], rsi_len) if use_rsi else np.nan

    long_entry = (df['sma_fast'] > df['sma_slow'])
    long_exit  = (df['sma_fast'] < df['sma_slow'])

    if use_rsi:
        long_entry = long_entry & (df['rsi'] >= rsi_buy)
        long_exit  = long_exit | (df['rsi'] <= rsi_sell)

    # Position: 1 when long, 0 when flat (no short for simplicity)
    df['pos'] = 0
    df.loc[long_entry, 'pos'] = 1
